from aiogram import F
from aiogram.types import CallbackQuery, BufferedInputFile, InputMediaPhoto
from aiogram.filters.state import StateFilter
from aiogram import Router
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode

import main
from modules.FSM_states import *
from modules.create_menu import *
import modules.schedule_json as sch


router_callback = Router()

DAYS_OF_WEEK = ('–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ')


# –ü—Ä–æ—Ñ–∏–ª—å
@router_callback.callback_query(F.data == "profile")
async def profile(call: CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    remind_time = get_remind_time(user_id)
    admin = is_admin(user_id)
    elder = is_elder(user_id)

    remind_time = "–ù–µ—Ç" if remind_time is None else remind_time
    admin = "‚úÖ" if admin else "‚ùå"
    elder = "‚úÖ" if elder else "‚ùå"

    await call.message.answer(f"üè† –≠—Ç–æ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n‚è±Ô∏è –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {remind_time}\n‚öôÔ∏è –ê–¥–º–∏–Ω: {admin}\nüìñ –°—Ç–∞—Ä–æ—Å—Ç–∞: {elder}",
                              reply_markup=create_profile_menu())
    await main.delete_prev_message(call.from_user.id, call.message.message_id, False)


# –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ
@router_callback.callback_query(F.data == "schedule", StateFilter(Form.idle))
async def schedule(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await state.set_state(Form.edit_schedule)
    await call.message.answer("üîé –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                              reply_markup=create_schedule_menu(call.from_user.id))
    await main.delete_prev_message(call.from_user.id, call.message.message_id)


# –°—Ç–∞—Ä–æ—Å—Ç—ã
@router_callback.callback_query(F.data == "elders", StateFilter(Form.idle))
async def elders(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await state.set_state(Form.edit_elders)
    await call.message.answer("üîé –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                              reply_markup=create_elders_menu(call.from_user.id))
    await main.delete_prev_message(call.from_user.id, call.message.message_id)


# –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
@router_callback.callback_query(F.data == "view_schedule")
async def view_schedule(call: CallbackQuery):
    await call.answer()

    schedule_data = sch.load_schedule('schedule.json')

    if not schedule_data:
        await call.message.answer("‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ")
        return

    response_parts = ['–í–∞—à–µ —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n ', '', '', '', '', '', '']

    for day, lessons in schedule_data.items():
        response_part = f"{day}:\n"
        for lesson in lessons:
            response_part += f'{lesson["name"]}: {lesson["start_time"]}-{lesson["end_time"]}\n'
        response_part += '\n'
        response_parts[DAYS_OF_WEEK.index(day)] += response_part

    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text='–ù–∞–∑–∞–¥',
                             callback_data='back_to_main')
    )

    await call.message.answer(' '.join(response_parts), reply_markup=builder.as_markup())
    await main.delete_prev_message(call.from_user.id, call.message.message_id, False)


# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
@router_callback.callback_query(F.data == "edit_remind_time", StateFilter(Form.idle))
async def edit_remind_time_prompt(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await state.set_state(Form.edit_remind_time)
    await call.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú –∏–ª–∏ '–£–¥–∞–ª–∏—Ç—å', —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:")
    await main.delete_prev_message(call.from_user.id, call.message.message_id)


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
@router_callback.callback_query(F.data == "add_subject")
async def add_subject_prompt(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await state.set_state(Form.edit_schedule_add)
    await call.message.answer(
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, –ø—Ä–µ–¥–º–µ—Ç, –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –≤—Ä–µ–º—è –∫–æ–Ω—Ü–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: `–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞, 8:30, 9:10`):")
    await main.delete_prev_message(call.from_user.id, call.message.message_id)

# –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
@router_callback.callback_query(F.data == "remove_subject")
async def remove_subject_prompt(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await state.set_state(Form.edit_schedule_delete)
    await call.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    await main.delete_prev_message(call.from_user.id, call.message.message_id)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ—Å—Ç—ã
@router_callback.callback_query(F.data == "add_elder")
async def add_elder_prompt(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await state.set_state(Form.edit_elders_add)
    await call.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ä–æ—Å—Ç—ã:")
    await main.delete_prev_message(call.from_user.id, call.message.message_id)

# –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ—Å—Ç—ã
@router_callback.callback_query(F.data == "remove_elder")
async def remove_elder_prompt(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await state.set_state(Form.edit_elders_delete)
    await call.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ç–∞—Ä–æ—Å—Ç—ã, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞–¥–æ —É–¥–∞–ª–∏—Ç—å:")
    await main.delete_prev_message(call.from_user.id, call.message.message_id)

# –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
@router_callback.callback_query(F.data == "create_announcement")
async def create_announcement(call: CallbackQuery, state: FSMContext):
    if not has_elder_rights(call.from_user.id):
        await call.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ.")
        return
    await state.set_state(Form.create_announcement)
    await call.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ *–û—Ç–º–µ–Ω–∞*, –µ—Å–ª–∏ –≤—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
                              parse_mode=ParseMode.MARKDOWN_V2)
    await main.delete_prev_message(call.from_user.id, call.message.message_id)

# –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
@router_callback.callback_query(F.data == "create_event")
async def create_event(call: CallbackQuery, state: FSMContext):
    if not has_elder_rights(call.from_user.id):
        await call.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ")
        return
    await state.set_state(Form.create_event)
    await call.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ _–ù–∞–∑–≤–∞–Ω–∏–µ, –í—Ä–µ–º—è \(–î–î\.–ú–ú\.–ì–ì–ì–ì –ß–ß:–ú–ú\)_ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ *–û—Ç–º–µ–Ω–∞*, –µ—Å–ª–∏ –≤—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", parse_mode=ParseMode.MARKDOWN_V2)
    await main.delete_prev_message(call.from_user.id, call.message.message_id)

# –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router_callback.callback_query(F.data == "back_to_main")
async def back_to_main(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await state.set_state(Form.idle)
    await call.message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                              reply_markup=create_main_menu(call.from_user.id))
    await main.delete_prev_message(call.from_user.id, call.message.message_id)

# –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ
@router_callback.callback_query(F.data == "homework")
async def homework(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await state.set_state(Form.edit_homework)
    await call.message.answer("üîé –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                                reply_markup=create_homework_menu(call.from_user.id))
    await main.delete_prev_message(call.from_user.id, call.message.message_id)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
@router_callback.callback_query(F.data == "add_homework")
async def add_homework_prompt(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await state.set_state(Form.edit_homework_add)
    await call.message.answer("""
‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
{–î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è};{–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞};{–û–ø–∏—Å–∞–Ω–∏–µ}

üñºÔ∏è –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –ø–µ—Ä–µ–¥ –æ—Å–Ω–æ–≤–Ω—ã–º.

‚ùå –ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è, –Ω–∞–ø–∏—à–∏—Ç–µ –û—Ç–º–µ–Ω–∞
    """)
    await main.delete_prev_message(call.from_user.id, call.message.message_id)

# –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
@router_callback.callback_query(F.data == "list_homework")
async def list_homework_prompt(call: CallbackQuery, state: FSMContext):
    await call.answer()
    collection = list_homework()

    if len(collection) == 0:
        await call.message.answer("‚ùå –ù–µ—Ç –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è")
        return

    builder = InlineKeyboardBuilder()

    for work in collection:
        builder.add(InlineKeyboardButton(text=f"[{work[0]}] {work[1]} - {work[3]}", callback_data=f"homework_get_{work[0]}", ))

    builder.add(InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_main"))

    builder.adjust(1)

    await call.message.answer("üìÉ –°–ø–∏—Å–æ–∫ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è:", reply_markup=builder.as_markup())
    await main.delete_prev_message(call.from_user.id, call.message.message_id, False)


# –ü—Ä–æ—Å–º–æ—Ç—Ä –æ–ø–∏—Å–∞–Ω–∏—è –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
@router_callback.callback_query(F.data.startswith('homework_get_'))
async def homework_get_prompt(call: CallbackQuery, state: FSMContext):
    homework_id = int(call.data.replace("homework_get_", ""))
    work = get_homework_data(homework_id)

    text = f"üè† –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ {work['subject']}:\n\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: {work['description']}\n\n‚è∞ –ò—Å—Ç–µ–∫–∞–µ—Ç {work['expires']}"

    photo_files = []
    first_photo = True
    for index, photo in enumerate(work["photos"]):
        file_buffer = BufferedInputFile(photo[2], filename=f"file_{index}.jpg")
        if first_photo:
            media_photo = InputMediaPhoto(media=file_buffer, caption=text)
            first_photo = False
        else:
            media_photo = InputMediaPhoto(media=file_buffer)
        photo_files.append(media_photo)

    await main.delete_prev_message(call.from_user.id, call.message.message_id, False)

    if len(photo_files) > 0:
        await call.message.answer_media_group(photo_files)
    else:
        await call.message.answer(text)
