from aiogram import Router
from aiogram.filters.state import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram.types import Message
from aiogram import F, types

import main
from modules.FSM_states import *
from modules.create_menu import *
import modules.scheduler_manager as sm
import modules.schedule_json as sch
import modules.notifier as notifier


router_handler = Router()

DAYS_OF_WEEK = ('–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ')



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router_handler.message(Command("start"))
async def send_welcome(message: Message, state: FSMContext):
    create_user(message.from_user.id, None, is_admin=are_users_empty())
    set_username(message.from_user.id, message.from_user.username)
    await state.set_state(Form.idle)
    await message.answer("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
                         reply_markup=create_main_menu(message.from_user.id))
    await main.delete_prev_message(message.from_user.id, message.message_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∏
@router_handler.message(F.text, StateFilter(Form.edit_remind_time))
async def handle_edit_remind_time(message: Message, state: FSMContext):
    text = message.text

    if text == "–£–¥–∞–ª–∏—Ç—å":
        await message.answer(f"‚úÖ –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–æ. –í—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –ø—Ä–æ—Ñ–∏–ª—å", reply_markup=create_profile_menu())
        set_remind_time(message.from_user.id, None)
        notifier.remove_notifier(message.from_user.id)
        await state.set_state(Form.idle)
        return

    if not is_right_time_format(text):
        await message.answer(f"‚ùå –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM")
        return

    set_remind_time(message.from_user.id, text)
    notifier.add_notifier(message.from_user.id, text)
    await state.set_state(Form.idle)
    await message.answer(f"‚úÖ –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –í—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –ø—Ä–æ—Ñ–∏–ª—å", reply_markup=create_profile_menu())
    await main.delete_prev_message(message.from_user.id, message.message_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞
@router_handler.message(F.text, StateFilter(Form.edit_schedule_add))
async def handle_add_subject(message: Message, state: FSMContext):
    if not has_elder_rights(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ —Å—Ç–∞—Ä–æ—Å—Ç—ã")
        return
    try:
        if message.text == "–û—Ç–º–µ–Ω–∞":
            await state.set_state(Form.idle)
            await message.answer("‚ùå –í—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=create_main_menu(message.from_user.id))
            return

        await message.delete()

        day, subject, start_time, end_time = map(str.strip, message.text.split(',', 3))
        assert day in DAYS_OF_WEEK

        if not is_right_time_format(start_time) or not is_right_time_format(end_time):
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏: HH:MM")
            return

        sch.add_schedule('schedule.json', day, subject, start_time, end_time)
        await message.answer(f"‚úÖ –ü—Ä–µ–¥–º–µ—Ç '{subject}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ {day}")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, –ø—Ä–µ–¥–º–µ—Ç, –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —É—Ä–æ–∫–∞, –≤—Ä–µ–º—è –∫–æ–Ω—Ü–∞ —É—Ä–æ–∫–∞ (–≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú)")
    except AssertionError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏")
    await main.delete_prev_message(message.from_user.id, message.message_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞
@router_handler.message(F.text, StateFilter(Form.edit_schedule_delete))
async def handle_remove_subject(message: Message, state: FSMContext):
    if not has_elder_rights(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ —Å—Ç–∞—Ä–æ—Å—Ç—ã")
        return

    subject = message.text.strip()
    sch.remove_one_subject('schedule.json', subject)
    await message.answer(f"‚úÖ –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç '{subject}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    await main.delete_prev_message(message.from_user.id, message.message_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ä–æ—Å—Ç—ã
@router_handler.message(F.text, StateFilter(Form.edit_elders_add))
async def handle_add_elder(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return

    username = message.text.strip()
    if username[0] == '@':
        username = username[1:]

    if not username_exists(username):
        await message.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º")
        return

    set_elder(username, True)
    print(f"Added elder {username}")
    await message.answer(f"‚úÖ {username} –Ω–∞–∑–Ω–∞—á–µ–Ω —Å—Ç–∞—Ä–æ—Å—Ç–æ–π")
    await main.delete_prev_message(message.from_user.id, message.message_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä–æ—Å—Ç—ã
@router_handler.message(F.text, StateFilter(Form.edit_elders_delete))
async def handle_remove_elder(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return

    username = message.text.strip()
    if username[0] == '@':
        username = username[1:]

    if not username_exists(username):
        await message.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º")
        return

    set_elder(id_from_username(username), False)
    print(f"Removed elder {username}")
    await message.answer(f"‚úÖ {username} –±–æ–ª—å—à–µ –Ω–µ —Å—Ç–∞—Ä–æ—Å—Ç–∞")
    await main.delete_prev_message(message.from_user.id, message.message_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
@router_handler.message(F.text, StateFilter(Form.create_announcement))
async def handle_create_announcement(message: Message, state: FSMContext):
    await state.set_state(Form.idle)
    if not has_elder_rights(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ")
    elif message.text == "–û—Ç–º–µ–Ω–∞":
        await message.answer("–í—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=create_main_menu(message.from_user.id))
    else:
        announcement = f'–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{message.from_user.username}:\n\n{message.text}'
        for user_id in get_all_user_ids():
            await main.bot.send_message(user_id[0], announcement)
        await message.answer("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ. –í—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                             reply_markup=create_main_menu(message.from_user.id))
    await main.delete_prev_message(message.from_user.id, message.message_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
@router_handler.message(F.text, StateFilter(Form.create_event))
async def handle_create_event(message: Message, state: FSMContext):
    if not has_elder_rights(message.from_user.id):
        await state.set_state(Form.idle)
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ")
    elif message.text == "–û—Ç–º–µ–Ω–∞":
        await state.set_state(Form.idle)
        await message.answer("–í—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=create_main_menu(message.from_user.id))
    elif len(message.text) > 20 and is_right_date_format(message.text[-16:]):
        text = message.text[:-18]
        time = datetime.strptime(message.text[-16:], "%d.%m.%Y %H:%M")
        username = message.from_user.username

        await state.set_state(Form.idle)
        announcement = f'–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}:\n\n{text}\n\n–í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è: {time}'

        sm.add_event_notifications(
            text = f'üìñ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ –æ—Ç @{username} –Ω–∞ {time}:\n\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: {text}',
            time = time
        )

        for user_id in get_all_user_ids():
            await main.bot.send_message(user_id[0], announcement)

        await message.answer("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ. –í—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                             reply_markup=create_main_menu(message.from_user.id))
    else:
        await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è")
    await main.delete_prev_message(message.from_user.id, message.message_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–º–∞—à–Ω–µ–π —Ä–∞–±–æ—Ç—ã
@router_handler.message(F.text, StateFilter(Form.edit_homework_add))
async def handle_add_homework(message: Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await message.answer("–í—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=create_main_menu(message.from_user.id))
        return

    content = message.text.split(";")
 
    if len(content) != 3:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤")
        return
 
    date = content[0]
    subject = content[1]
    description = content[2]
 
    if not is_right_homework_date_format(date):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã")
        return
 
    data = await state.get_data()
    photos = data.get("photos", [])
 
    add_homework(date, subject, description, photos)
 
    await message.answer(f"‚úÖ –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ")
    await state.clear()
    await main.delete_prev_message(message.from_user.id, message.message_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏–µ –¥–æ–º–∞—à–Ω–µ–π —Ä–∞–±–æ—Ç—ã
@router_handler.message(F.text, StateFilter(Form.edit_homework_delete))
async def handle_delete_homework(message: Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await message.answer("–í—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=create_main_menu(message.from_user.id))
        await main.delete_prev_message(message.from_user.id, message.message_id)
        return

    data = await state.get_data()

    if message.text == "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
        homework_id = data.get("homework_id", None)

        if homework_id is not None:
            await message.answer(f"‚úÖ –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º {homework_id} –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ")
            await state.update_data({"homework_id": None})
            return

    if not message.text.isnumeric():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")
        return

    await state.update_data({"homework_id": int(message.text)})
    await message.answer(f"‚úÖ –ï—Å–ª–∏ –≤—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º {message.text}, –Ω–∞–ø–∏—à–∏—Ç–µ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
@router_handler.message(F.photo, StateFilter(Form.edit_homework_add))
async def handle_add_homework_image(message: Message, state: FSMContext):
    max_photos = 10 # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ –≤ –æ–¥–Ω–æ–π –¥–æ–º–∞—à–∫–µ
 
    data = await state.get_data()
    current_photos = data.get("photos", [])
 
    best_photos = [message.photo[-1]] # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –≤–µ—Ä—Å–∏–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Å–∞–º—ã–º –≤—ã—Å–æ–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
    photos_in_message = len(best_photos)
    free_photos_space = min(len(message.photo), max_photos - len(current_photos)) # –°–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ –µ—â—ë –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å
 
    if free_photos_space <= 0:
        await message.answer(f"‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –±–æ–ª–µ–µ {max_photos} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        return
 
    photos = []
 
    for photo in best_photos[:photos_in_message]:
        photo_file = await main.bot.get_file(photo.file_id)
        downloaded_file = await main.bot.download_file(photo_file.file_path)
        binary_data = downloaded_file.read()
        photos.append(binary_data)
 
    updated_photos = current_photos + photos
 
    await state.update_data({"photos": updated_photos})
    await message.answer("‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
    await main.delete_prev_message(message.from_user.id, message.message_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:
@router_handler.message()
async def idle(message: types.Message, state: FSMContext):
    await state.set_state(Form.idle)
    await message.answer("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –ø–æ–Ω—è—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
                         reply_markup=create_main_menu(message.from_user.id))
    await main.delete_prev_message(message.from_user.id, message.message_id)
